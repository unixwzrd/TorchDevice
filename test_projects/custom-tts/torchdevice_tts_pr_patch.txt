
# Add the following code to TorchDevice.py to add TTS compatibility

# In the imports section, add:
import functools
import inspect

# Add the following method to the TorchDevice class:
@classmethod
def patch_for_tts(cls):
    """
    Patch TorchDevice to work with TTS.
    This method adds the necessary patches to make TorchDevice compatible with TTS.
    """
    # Store the original _get_restore_location function
    _original_get_restore_location = torch.serialization._get_restore_location
    
    # Create a patched version
    @functools.wraps(_original_get_restore_location)
    def patched_get_restore_location(map_location):
        """
        A patched version of torch.serialization._get_restore_location that handles
        TorchDevice device objects correctly.
        """
        if cls.debug:
            logger.debug("Patched _get_restore_location called with map_location: %s", map_location)
        
        # Handle device objects by checking for attributes instead of using isinstance
        if hasattr(map_location, 'type') and hasattr(map_location, 'index'):
            if cls.debug:
                logger.debug("Detected device object with type: %s", map_location.type)
            
            # Create a restore function that handles device mapping
            def restore_location(storage, location):
                if cls.debug:
                    logger.debug("Restore location called with location: %s", location)
                # Just return the storage as is - we'll let TorchDevice handle device mapping
                return storage
            
            return restore_location
        
        # Fall back to original function for other cases
        return _original_get_restore_location(map_location)
    
    # Patch torch.serialization._get_restore_location
    torch.serialization._get_restore_location = patched_get_restore_location
    
    # Also patch the original torch.serialization module to fix isinstance checks
    original_code = """
    elif isinstance(map_location, torch.device):
    """
    patched_code = """
    elif hasattr(map_location, 'type') and hasattr(map_location, 'index'):
    """
    
    # Get the source code of torch.serialization._get_restore_location
    source = inspect.getsource(torch.serialization._get_restore_location)
    
    # Check if we need to patch the isinstance check
    if original_code.strip() in source:
        # Create a new version of the function with the isinstance check fixed
        source = source.replace(original_code, patched_code)
        
        # Create a namespace to execute the patched code
        namespace = {}
        exec(source, torch.serialization.__dict__, namespace)
        
        # Replace the original function with our patched version
        torch.serialization._get_restore_location = namespace['_get_restore_location']
        
        if cls.debug:
            logger.info("Patched isinstance check in torch.serialization._get_restore_location")
    
    if cls.debug:
        logger.info("TorchDevice TTS compatibility patches applied")

# Modify the apply_patches method to call patch_for_tts:
@classmethod
def apply_patches(cls):
    # ... existing code ...
    
    # Add TTS compatibility patches
    cls.patch_for_tts()
