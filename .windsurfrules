# Refactoring & Testing Rules for TorchDevice

## Reference Documents

- Use the official @PyTorch documentation as a guide.
- Additional documentation is in the @.project-planning directory
- Always refer to the reference implementation in TorchDevice.py.original (or TorchDevice.py.bak) during the refactoring process.
- Refer to the documents in the @docs directory, especially the @TorchDevice_Behavior.md

## Module Purpose & Usage

- Develop and test the new Python module in the project directory: TorchDevice/TorchDevice.py.
- The library must never be called directly. Instead, it hooks into PyTorch and intercepts device calls to redirect them appropriately:
- CUDA available: Pass through CUDA calls directly to PyTorch.
- MPS available: Pass through MPS calls directly to PyTorch.
- Neither available: Fall back to CPU.

## Migration & Redirection

- This serves as a migration tool for converting CUDA code to run on MPS (and vice versa).
- If code is written for CUDA but runs on an MPS device, it should redirect CUDA calls to MPS.
- If code is written for MPS but running on a CUDA device, it should redirect MPS calls to CUDA.
- The library should present an interface identical to PyTorch. It hooks into the PyTorch package transparently so that:
- Developers or users never need to call any part of TorchDevice directly.
- All calls to devices are intercepted and redirected as needed.
- When a call is made for the wrong device, a warning is displayed, including the location of the call for further code adjustments.

## Installation & Testing

- After making changes to TorchDevice.py, re-install the module in your virtual environment using:

```bash
  python run_tests_and_install.py --test-only tests/[test-name.py]
```

or

```bash
  python run_tests_and_install.py --test-only --update-expected tests/[test-name.py]
```

(This command is used for both testing and installation.)

## After Unit Testing and Completing Refactoring

- Real repository projects from GitHub are placed in the directory TorchDevice/test_projects. Use these projects to test real‑world scenarios.
- If any cases are not correctly handled during testing, fix them in TorchDevice.py and re-install using the same command.
- In any project, simply using import TorchDevice should trigger the hook into PyTorch-there should be no need for any direct calls to Torcnt Guidelines
- No application‑specific patches or changes should be made to TorchDevice.
- The refactored module must be self‑contained; it should not depend on external environment variables.
- TorchDevice should detect the available hardware automatically. If multiple devices are available, it should allow the user to choose the desired device.
- It should intercept CUDA calls and device type requests:
- Replace CUDA calls with MPS calls when an MPS device exists.
- Replace MPS device calls with CUDA if appropriate.
- Ultimately, fall back to CPU if neither CUDA nor MPS are available.
- The programmer/developer/user should not have to perform any extra steps beyond importing TorchDevice to have it hook into the PyTorch framework.

## Priorities

- Refactoring Priority:
Focus on breaking down the monolithic TorchDevice.py into clear sub‑modules (e.g., core.py, logging.py, cuda/mocks.py, mps/mocks.py, tensor/operations.py, module/operations.py, utils.py).
- Testing Priority:
After refactoring, rigorously test the refactored version of TorchDevice.py using the provided test projects and installation commands to ensure that all redirections and hooks into PyTorch work as intended.
